/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Drink, Drink$ } from "./drink";
import { ErrorT, ErrorT$ } from "./error";
import { z } from "zod";

export type GetDrinkRequest = {
    name: string;
};

export type GetDrinkResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * A drink.
     */
    drink?: Drink | undefined;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetDrinkRequest$ {
    export type Inbound = {
        name: string;
    };

    export const inboundSchema: z.ZodType<GetDrinkRequest, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });

    export type Outbound = {
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDrinkRequest> = z
        .object({
            name: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
            };
        });
}

/** @internal */
export namespace GetDrinkResponse$ {
    export type Inbound = {
        ContentType: string;
        Drink?: Drink$.Inbound | undefined;
        Error?: ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetDrinkResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Drink: Drink$.inboundSchema.optional(),
            Error: ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Drink === undefined ? null : { drink: v.Drink }),
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Drink?: Drink$.Outbound | undefined;
        Error?: ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDrinkResponse> = z
        .object({
            contentType: z.string(),
            drink: Drink$.outboundSchema.optional(),
            error: ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.drink === undefined ? null : { Drink: v.drink }),
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
