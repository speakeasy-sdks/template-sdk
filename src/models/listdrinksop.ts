/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Drink, Drink$ } from "./drink";
import { DrinkType, DrinkType$ } from "./drinktype";
import { ErrorT, ErrorT$ } from "./error";
import { z } from "zod";

export const ListDrinksOpServerList = [
    "https://speakeasy.bar",
    "https://test.speakeasy.bar",
] as const;

export type ListDrinksRequest = {
    /**
     * The type of drink to filter by. If not provided all drinks will be returned.
     */
    drinkType?: DrinkType | undefined;
};

export type ListDrinksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A list of drinks.
     */
    classes?: Array<Drink> | undefined;
};

/** @internal */
export namespace ListDrinksRequest$ {
    export type Inbound = {
        drinkType?: DrinkType | undefined;
    };

    export const inboundSchema: z.ZodType<ListDrinksRequest, z.ZodTypeDef, Inbound> = z
        .object({
            drinkType: DrinkType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.drinkType === undefined ? null : { drinkType: v.drinkType }),
            };
        });

    export type Outbound = {
        drinkType?: DrinkType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDrinksRequest> = z
        .object({
            drinkType: DrinkType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.drinkType === undefined ? null : { drinkType: v.drinkType }),
            };
        });
}

/** @internal */
export namespace ListDrinksResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        classes?: Array<Drink$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ListDrinksResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Error: ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            classes: z.array(Drink$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.classes === undefined ? null : { classes: v.classes }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        classes?: Array<Drink$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDrinksResponse> = z
        .object({
            contentType: z.string(),
            error: ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            classes: z.array(Drink$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.classes === undefined ? null : { classes: v.classes }),
            };
        });
}
