/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DrinkInput, DrinkInput$ } from "./drinkinput";
import { ErrorT, ErrorT$ } from "./error";
import { IngredientInput, IngredientInput$ } from "./ingredientinput";
import { z } from "zod";

export type StockUpdateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

export type StockUpdateRequestBody = {
    drink?: DrinkInput | undefined;
    ingredient?: IngredientInput | undefined;
};

/** @internal */
export namespace StockUpdateResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<StockUpdateResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Error: ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StockUpdateResponse> = z
        .object({
            contentType: z.string(),
            error: ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}

/** @internal */
export namespace StockUpdateRequestBody$ {
    export type Inbound = {
        drink?: DrinkInput$.Inbound | undefined;
        ingredient?: IngredientInput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<StockUpdateRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            drink: DrinkInput$.inboundSchema.optional(),
            ingredient: IngredientInput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.drink === undefined ? null : { drink: v.drink }),
                ...(v.ingredient === undefined ? null : { ingredient: v.ingredient }),
            };
        });

    export type Outbound = {
        drink?: DrinkInput$.Outbound | undefined;
        ingredient?: IngredientInput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StockUpdateRequestBody> = z
        .object({
            drink: DrinkInput$.outboundSchema.optional(),
            ingredient: IngredientInput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.drink === undefined ? null : { drink: v.drink }),
                ...(v.ingredient === undefined ? null : { ingredient: v.ingredient }),
            };
        });
}
