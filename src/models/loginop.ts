/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorT, ErrorT$ } from "./error";
import { z } from "zod";

export type LoginSecurity = {
    password: string;
    username: string;
};

export enum TypeT {
    ApiKey = "apiKey",
    Jwt = "JWT",
}

export type LoginRequestBody = {
    type: TypeT;
};

/**
 * The api key to use for authenticated endpoints.
 */
export type LoginResponseBody = {
    token?: string | undefined;
};

export type LoginResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The api key to use for authenticated endpoints.
     */
    object?: LoginResponseBody | undefined;
};

/** @internal */
export const TypeT$ = z.nativeEnum(TypeT);

/** @internal */
export namespace LoginRequestBody$ {
    export type Inbound = {
        type: TypeT;
    };

    export const inboundSchema: z.ZodType<LoginRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            type: TypeT$,
        })
        .transform((v) => {
            return {
                type: v.type,
            };
        });

    export type Outbound = {
        type: TypeT;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginRequestBody> = z
        .object({
            type: TypeT$,
        })
        .transform((v) => {
            return {
                type: v.type,
            };
        });
}

/** @internal */
export namespace LoginResponseBody$ {
    export type Inbound = {
        token?: string | undefined;
    };

    export const inboundSchema: z.ZodType<LoginResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            token: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });

    export type Outbound = {
        token?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginResponseBody> = z
        .object({
            token: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });
}

/** @internal */
export namespace LoginResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        object?: LoginResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<LoginResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Error: ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => LoginResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        object?: LoginResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginResponse> = z
        .object({
            contentType: z.string(),
            error: ErrorT$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => LoginResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
