/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorT, ErrorT$ } from "./error";
import { Order, Order$ } from "./order";
import { OrderInput, OrderInput$ } from "./orderinput";
import { z } from "zod";

export type CreateOrderOrderUpdateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: ErrorT | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

export type CreateOrderOrderUpdateRequestBody = {
    /**
     * An order for a drink or ingredient.
     */
    order?: OrderInput | undefined;
};

export type CreateOrderRequest = {
    requestBody: Array<OrderInput>;
    /**
     * The url to call when the order is updated.
     */
    callbackUrl?: string | undefined;
};

export type CreateOrderResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * An unknown error occurred interacting with the API.
     */
    error?: ErrorT | undefined;
    /**
     * The order was created successfully.
     */
    order?: Order | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateOrderOrderUpdateResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: ErrorT$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateOrderOrderUpdateResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Error: ErrorT$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: ErrorT$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrderOrderUpdateResponse> =
        z
            .object({
                contentType: z.string(),
                error: ErrorT$.outboundSchema.optional(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    ...(v.error === undefined ? null : { Error: v.error }),
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                };
            });
}

/** @internal */
export namespace CreateOrderOrderUpdateRequestBody$ {
    export type Inbound = {
        order?: OrderInput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        CreateOrderOrderUpdateRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            order: OrderInput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.order === undefined ? null : { order: v.order }),
            };
        });

    export type Outbound = {
        order?: OrderInput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateOrderOrderUpdateRequestBody
    > = z
        .object({
            order: OrderInput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.order === undefined ? null : { order: v.order }),
            };
        });
}

/** @internal */
export namespace CreateOrderRequest$ {
    export type Inbound = {
        RequestBody: Array<OrderInput$.Inbound>;
        callback_url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateOrderRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.array(OrderInput$.inboundSchema),
            callback_url: z.string().optional(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                ...(v.callback_url === undefined ? null : { callbackUrl: v.callback_url }),
            };
        });

    export type Outbound = {
        RequestBody: Array<OrderInput$.Outbound>;
        callback_url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrderRequest> = z
        .object({
            requestBody: z.array(OrderInput$.outboundSchema),
            callbackUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                ...(v.callbackUrl === undefined ? null : { callback_url: v.callbackUrl }),
            };
        });
}

/** @internal */
export namespace CreateOrderResponse$ {
    export type Inbound = {
        ContentType: string;
        Error?: ErrorT$.Inbound | undefined;
        Order?: Order$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateOrderResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Error: ErrorT$.inboundSchema.optional(),
            Order: Order$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Error === undefined ? null : { error: v.Error }),
                ...(v.Order === undefined ? null : { order: v.Order }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Error?: ErrorT$.Outbound | undefined;
        Order?: Order$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrderResponse> = z
        .object({
            contentType: z.string(),
            error: ErrorT$.outboundSchema.optional(),
            order: Order$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.error === undefined ? null : { Error: v.error }),
                ...(v.order === undefined ? null : { Order: v.order }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
