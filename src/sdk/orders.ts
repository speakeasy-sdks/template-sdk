/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as models from "../models";

export class Orders extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create an order.
     *
     * @remarks
     * Create an order for a drink.
     */
    async createOrder(
        requestBody: Array<models.OrderInput>,
        callbackUrl?: string | undefined,
        options?: RequestOptions
    ): Promise<models.CreateOrderResponse> {
        const input: models.CreateOrderRequest = {
            requestBody: requestBody,
            callbackUrl: callbackUrl,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = models.CreateOrderRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.RequestBody, { explode: true });

        const path = this.templateURLComponent("/order")();

        const query = [
            enc$.encodeForm("callback_url", payload.callback_url, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.CreateOrderResponse$.inboundSchema.parse({
                ...responseFields,
                Order: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "5XX", "application/json")) {
            const responseBody = await response.json();
            const result = models.APIError$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new models.APIError(result);
        } else if (this.matchResponse(response, "default", "application/json")) {
            const responseBody = await response.json();
            const result = models.CreateOrderResponse$.inboundSchema.parse({
                ...responseFields,
                Error: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
